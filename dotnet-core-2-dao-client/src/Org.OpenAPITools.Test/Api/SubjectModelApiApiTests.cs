/* 
 * Femr Core
 *
 * Femr Core
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing SubjectModelApiApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class SubjectModelApiApiTests : IDisposable
    {
        private SubjectModelApiApi instance;

        public SubjectModelApiApiTests()
        {
            instance = new SubjectModelApiApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of SubjectModelApiApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' SubjectModelApiApi
            //Assert.IsType(typeof(SubjectModelApiApi), instance, "instance is a SubjectModelApiApi");
        }

        
        /// <summary>
        /// Test SubjectGet
        /// </summary>
        [Fact]
        public void SubjectGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //GetListSchema q = null;
            //var response = instance.SubjectGet(q);
            //Assert.IsType<InlineResponse2002> (response, "response is InlineResponse2002");
        }
        
        /// <summary>
        /// Test SubjectInfoGet
        /// </summary>
        [Fact]
        public void SubjectInfoGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //GetInfoSchema q = null;
            //var response = instance.SubjectInfoGet(q);
            //Assert.IsType<InlineResponse2003> (response, "response is InlineResponse2003");
        }
        
        /// <summary>
        /// Test SubjectPkDelete
        /// </summary>
        [Fact]
        public void SubjectPkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int pk = null;
            //var response = instance.SubjectPkDelete(pk);
            //Assert.IsType<InlineResponse404> (response, "response is InlineResponse404");
        }
        
        /// <summary>
        /// Test SubjectPkGet
        /// </summary>
        [Fact]
        public void SubjectPkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int pk = null;
            //GetItemSchema q = null;
            //var response = instance.SubjectPkGet(pk, q);
            //Assert.IsType<InlineResponse2004> (response, "response is InlineResponse2004");
        }
        
        /// <summary>
        /// Test SubjectPkPut
        /// </summary>
        [Fact]
        public void SubjectPkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int pk = null;
            //SubjectModelApiPut subjectModelApiPut = null;
            //var response = instance.SubjectPkPut(pk, subjectModelApiPut);
            //Assert.IsType<InlineResponse2005> (response, "response is InlineResponse2005");
        }
        
        /// <summary>
        /// Test SubjectPost
        /// </summary>
        [Fact]
        public void SubjectPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SubjectModelApiPost subjectModelApiPost = null;
            //var response = instance.SubjectPost(subjectModelApiPost);
            //Assert.IsType<InlineResponse201> (response, "response is InlineResponse201");
        }
        
    }

}
