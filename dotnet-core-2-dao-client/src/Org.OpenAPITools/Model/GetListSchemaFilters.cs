/* 
 * Femr Core
 *
 * Femr Core
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// GetListSchemaFilters
    /// </summary>
    [DataContract]
    public partial class GetListSchemaFilters :  IEquatable<GetListSchemaFilters>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetListSchemaFilters" /> class.
        /// </summary>
        /// <param name="col">col.</param>
        /// <param name="opr">opr.</param>
        /// <param name="value">value.</param>
        public GetListSchemaFilters(string col = default(string), string opr = default(string), AnyOfnumberstringboolean value = default(AnyOfnumberstringboolean))
        {
            this.Col = col;
            this.Opr = opr;
            this.Value = value;
        }
        
        /// <summary>
        /// Gets or Sets Col
        /// </summary>
        [DataMember(Name="col", EmitDefaultValue=false)]
        public string Col { get; set; }

        /// <summary>
        /// Gets or Sets Opr
        /// </summary>
        [DataMember(Name="opr", EmitDefaultValue=false)]
        public string Opr { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public AnyOfnumberstringboolean Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetListSchemaFilters {\n");
            sb.Append("  Col: ").Append(Col).Append("\n");
            sb.Append("  Opr: ").Append(Opr).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetListSchemaFilters);
        }

        /// <summary>
        /// Returns true if GetListSchemaFilters instances are equal
        /// </summary>
        /// <param name="input">Instance of GetListSchemaFilters to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetListSchemaFilters input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Col == input.Col ||
                    (this.Col != null &&
                    this.Col.Equals(input.Col))
                ) && 
                (
                    this.Opr == input.Opr ||
                    (this.Opr != null &&
                    this.Opr.Equals(input.Opr))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Col != null)
                    hashCode = hashCode * 59 + this.Col.GetHashCode();
                if (this.Opr != null)
                    hashCode = hashCode * 59 + this.Opr.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
